1
00:00:00,560 --> 00:00:04,800
很高兴 你已经完成了这节高难度课

2
00:00:04,799 --> 00:00:07,290
在实战项目描述里 你会找到关于成功完成项目

3
00:00:07,290 --> 00:00:09,500
所需的所有资源

4
00:00:09,500 --> 00:00:10,029
在本视频中

5
00:00:10,029 --> 00:00:14,279
我想指出 UKF 一些非常了不起的地方

6
00:00:14,279 --> 00:00:17,259
此外 我还想解释一下 为什么

7
00:00:17,260 --> 00:00:20,190
卡尔曼滤波器对无人驾驶车而言 是如此重要

8
00:00:20,190 --> 00:00:22,920
我们看看项目的这个场景

9
00:00:22,920 --> 00:00:26,570
你之前在 EKF 项目里见过类似的图

10
00:00:26,570 --> 00:00:30,399
这里显示的是一辆自行车 首先直线行驶

11
00:00:30,399 --> 00:00:31,969
然后沿圆形转弯

12
00:00:31,969 --> 00:00:34,699
自行车的路径用蓝色表示

13
00:00:34,700 --> 00:00:39,160
绿线是我们从激光雷达和雷达收到

14
00:00:39,159 --> 00:00:39,949
的所有测量值序列

15
00:00:39,950 --> 00:00:43,140
和之前一样 这些测量值充满噪音

16
00:00:43,140 --> 00:00:48,020
橙色的点是 UKF 的估算来源 融合了激光

17
00:00:48,020 --> 00:00:49,360
和雷达测量值

18
00:00:49,359 --> 00:00:53,159
记住 上一个实战项目里的线性过程模型

19
00:00:53,159 --> 00:00:55,379
在追踪拐弯时碰到了问题

20
00:00:55,380 --> 00:01:00,060
我们这次使用的 CTRV 模型能很好地追踪拐弯

21
00:01:00,060 --> 00:01:03,070
并且提供平滑的位置估算

22
00:01:03,070 --> 00:01:05,650
你可以调整过程噪音值

23
00:01:05,650 --> 00:01:07,550
让评估更加平滑

24
00:01:07,549 --> 00:01:10,519
或者强迫噪音更快地跟上测量值

25
00:01:10,519 --> 00:01:12,649
改变过程噪音值时

26
00:01:12,650 --> 00:01:15,540
还一定要检查滤波器的一致性

27
00:01:15,540 --> 00:01:18,510
我的滤波器一致性检查看起来是这样的

28
00:01:18,510 --> 00:01:22,832
这里的橙色是三维雷达测量值的

29
00:01:22,832 --> 00:01:23,810
NIS 值

30
00:01:23,810 --> 00:01:26,100
我还用蓝色画出了 95% 线

31
00:01:27,250 --> 00:01:31,670
和预期的一样 少量的 NIS 值超过了这条线

32
00:01:31,670 --> 00:01:34,019
如果你的 NIS 值是这样的

33
00:01:34,019 --> 00:01:37,099
那么滤波器就是一致的

34
00:01:37,099 --> 00:01:40,449
这是激光测量值的 NIS 值的样子

35
00:01:40,450 --> 00:01:44,620
注意 这里的 95% 线位置不一样

36
00:01:44,620 --> 00:01:48,050
因为激光测量值是一个二维向量

37
00:01:48,049 --> 00:01:51,450
实战项目描述提供了成功进行

38
00:01:51,450 --> 00:01:53,659
一致性检查所需的准确标准详情

39
00:01:53,659 --> 00:01:56,469
记住 如果 UKF 是一致的

40
00:01:56,469 --> 00:01:59,368
它就能够提供现实的协方差矩阵

41
00:02:00,510 --> 00:02:04,660
当然 UKF 还能估算自行车的速度

42
00:02:04,659 --> 00:02:06,670
有没有雷达都可以

43
00:02:06,670 --> 00:02:09,650
但是 如果你比较这两个选项

44
00:02:09,650 --> 00:02:15,000
你会发现 如果使用了雷达 速度估算的收敛速度更快

45
00:02:15,000 --> 00:02:17,889
你可以试试 打开并关闭两个传感器

46
00:02:17,889 --> 00:02:20,599
看看它们各自有什么作用

47
00:02:20,599 --> 00:02:24,442
让我印象深刻的是 UKF 评估自行车方向

48
00:02:24,442 --> 00:02:26,445
非常精确

49
00:02:26,445 --> 00:02:30,030
我们的传感器都无法直接观察方向

50
00:02:30,030 --> 00:02:32,650
但我们仍然得到了精确的估算

51
00:02:32,650 --> 00:02:36,620
甚至角速度都能估算出来 提供了有用的结果

52
00:02:36,620 --> 00:02:38,180
对于无人驾驶车

53
00:02:38,180 --> 00:02:41,379
其他车辆的角速度很重要

54
00:02:41,379 --> 00:02:43,969
想像一下 另一辆车

55
00:02:43,969 --> 00:02:47,020
开始变道 或你前面的自行车想要左拐

56
00:02:47,020 --> 00:02:50,880
当然 他们很可能都会发出信号

57
00:02:50,879 --> 00:02:54,789
但角速度是最终的行为预测指标

58
00:02:54,789 --> 00:02:58,215
我们总结一下 UKF 作为无人驾驶的传感器融合工具

59
00:02:58,215 --> 00:03:00,370
有三个最重要的功能

60
00:03:00,370 --> 00:03:05,175
第一 在 UKF 中 你可以输入噪音测量数据

61
00:03:05,175 --> 00:03:06,942
并获得周围动态对象的

62
00:03:06,942 --> 00:03:12,860
位置和速度的平滑估算 不会引发延时

63
00:03:12,860 --> 00:03:16,258
第二 即便使用的传感器无法直接观察 你还是可以

64
00:03:16,258 --> 00:03:20,337
获得其他车辆的方向和角速度的

65
00:03:20,336 --> 00:03:21,155
估算

66
00:03:21,156 --> 00:03:23,878
第三 除此以外

67
00:03:23,877 --> 00:03:27,891
UKF 还能给出结果的准确度

68
00:03:27,891 --> 00:03:31,850
因为它能提供每个故uande协方差矩阵

69
00:03:31,850 --> 00:03:36,426
如果 UKF 已经执行了一致性检查 你就能知道

70
00:03:36,426 --> 00:03:38,799
协方差矩阵是现实的

71
00:03:38,800 --> 00:03:42,420
估算结果的不确定性对无人驾驶车非常重要

72
00:03:42,419 --> 00:03:46,719
因为 如果在某个时刻 前方车辆的位置非常不确定

73
00:03:46,719 --> 00:03:48,219
你最好多拉开点车距

